'use strict';

(function () {

  var wordContainerCellClass = '.word-container-cell';

  var mongolPrefix = '<span class="';
  var mongolSuffix = '"></span>';

  /**var unicodeMap = {
    a10:"a",
    a11:"a1"
    a12:"a2"
    a13:"a3"
    a20:"e"
    a21:"e1"
a22
:
"a2"
a23
:
"a3"
a30
:
"i"
a31
:
"i1"
a32
:
"i2"
a33
:
"i3"
a40
:
"o"
a41
:
"o1"
a42
:
"o2"
a43
:
"o3"
a50
:
"o"
a51
:
"o1"
a52
:
"o2"
a53
:
"o3"
a60
:
"u"
a61
:
"u1"
a62
:
"o2"
a63
:
"o3"
a70
:
"u"
a71
:
"u1"
a72
:
"o2"
a73
:
"o3"
b10
:
"ba"
b11
:
"ba1"
b12
:
"ba2"
b13
:
"ba3"
b20
:
"ba"
b21
:
"ba1"
b22
:
"ba2"
b23
:
"ba3"
b30
:
"bi"
b31
:
"bi1"
b32
:
"bi2"
b33
:
"bi3"
b40
:
"bo"
b41
:
"bo1"
b42
:
"bo2"
b43
:
"bo3"
b50
:
"bo"
b51
:
"bo1"
b52
:
"bo2"
b53
:
"bo3"
b60
:
"bu"
b61
:
"bu1"
b62
:
"bo2"
b63
:
"bo3"
b70
:
"bu"
b71
:
"bu1"
b72
:
"bo2"
b73
:
"bo3"
d10
:
"da"
d11
:
"da1"
d12
:
"ta2"
d13
:
"ta3"
d20
:
"da"
d21
:
"da1"
d22
:
"ta2"
d23
:
"ta3"
d30
:
"di"
d31
:
"di1"
d32
:
"ti2"
d33
:
"ti3"
d40
:
"do"
d41
:
"do1"
d42
:
"to2"
d43
:
"to3"
d50
:
"do"
d51
:
"do1"
d52
:
"to2"
d53
:
"to3"
d60
:
"du"
d61
:
"du1"
d62
:
"to2"
d63
:
"to3"
d70
:
"du"
d71
:
"du1"
d72
:
"to2"
d73
:
"to3"
g10
:
"ga"
g11
:
"ga1"
g12
:
"ga2"
g13
:
"ga3"
g20
:
"ge"
g21
:
"he1"
g22
:
"he2"
g23
:
"he3"
g30
:
"gi"
g31
:
"hi1"
g32
:
"hi2"
g33
:
"hi3"
g40
:
"go"
g41
:
"go1"
g42
:
"go2"
g43
:
"go3"
g50
:
"go"
g51
:
"go1"
g52
:
"go2"
g53
:
"go3"
g60
:
"gu"
g61
:
"hu1"
g62
:
"hu2"
g63
:
"hu3"
g70
:
"gu"
g71
:
"hu1"
g72
:
"hu2"
g73
:
"hu3"
h10
:
"ha"
h11
:
"ha1"
h12
:
"ha2"
h13
:
"ha3"
h20
:
"he"
h21
:
"he1"
h22
:
"he2"
h23
:
"he3"
h30
:
"hi"
h31
:
"hi1"
h32
:
"hi2"
h33
:
"hi3"
h40
:
"ho"
h41
:
"ho1"
h42
:
"ho2"
h43
:
"ho3"
h50
:
"ho"
h51
:
"ho1"
h52
:
"ho2"
h53
:
"ho3"
h60
:
"hu"
h61
:
"hu1"
h62
:
"hu2"
h63
:
"hu3"
h70
:
"hu"
h71
:
"hu1"
h72
:
"hu2"
h73
:
"hu3"
j10
:
"ja"
j11
:
"ja1"
j12
:
"ja2"
j13
:
"ja3"
j20
:
"ja"
j21
:
"ja1"
j22
:
"ja2"
j23
:
"ja3"
j30
:
"ji"
j31
:
"ji1"
j32
:
"ji2"
j33
:
"ji3"
j40
:
"jo"
j41
:
"jo1"
j42
:
"jo2"
j43
:
"jo3"
j50
:
"jo"
j51
:
"jo1"
j52
:
"jo2"
j53
:
"jo3"
j60
:
"ju"
j61
:
"ju1"
j62
:
"jo2"
j63
:
"jo3"
j70
:
"ju"
j71
:
"ju1"
j72
:
"jo2"
j73
:
"jo3"
l10
:
"la"
l11
:
"la1"
l12
:
"la2"
l13
:
"la3"
l14
:
"la4"
l20
:
"la"
l21
:
"la1"
l22
:
"la2"
l23
:
"la3"
l24
:
"la4"
l30
:
"li"
l31
:
"li1"
l32
:
"li2"
l33
:
"li3"
l40
:
"lo"
l41
:
"lo1"
l42
:
"lo2"
l43
:
"lo3"
l50
:
"lo"
l51
:
"lo1"
l52
:
"lo2"
l53
:
"lo3"
l60
:
"lu"
l61
:
"lu1"
l62
:
"lo2"
l63
:
"lo3"
l70
:
"lu"
l71
:
"lu1"
l72
:
"lo2"
l73
:
"lo3"
m10
:
"ma"
m11
:
"ma1"
m12
:
"ma2"
m13
:
"ma3"
m14
:
"ma4"
m20
:
"ma"
m21
:
"ma1"
m22
:
"ma2"
m23
:
"ma3"
m24
:
"ma4"
m30
:
"mi"
m31
:
"mi1"
m32
:
"mi2"
m33
:
"mi3"
m40
:
"mo"
m41
:
"mo1"
m42
:
"mo2"
m43
:
"mo3"
m50
:
"mo"
m51
:
"mo1"
m52
:
"mo2"
m53
:
"mo3"
m60
:
"mu"
m61
:
"mu1"
m62
:
"mo2"
m63
:
"mo3"
m70
:
"mu"
m71
:
"mu1"
m72
:
"mo2"
m73
:
"mo3"
n10
:
"na"
n11
:
"na1"
n12
:
"na2"
n13
:
"na3"
n14
:
"na4"
n20
:
"na"
n21
:
"na1"
n22
:
"na2"
n23
:
"na3"
n24
:
"na4"
n30
:
"ni"
n31
:
"ni1"
n32
:
"ni2"
n33
:
"ni3"
n40
:
"no"
n41
:
"no1"
n42
:
"no2"
n43
:
"no3"
n50
:
"no"
n51
:
"no1"
n52
:
"no2"
n53
:
"no3"
n60
:
"nu"
n61
:
"nu1"
n62
:
"no2"
n63
:
"no3"
n70
:
"nu"
n71
:
"nu1"
n72
:
"no2"
n73
:
"no3"
p10
:
"pa"
p11
:
"pa1"
p12
:
"pa2"
p13
:
"pa3"
p20
:
"pa"
p21
:
"pa1"
p22
:
"pa2"
p23
:
"pa3"
p30
:
"pi"
p31
:
"pi1"
p32
:
"pi2"
p33
:
"pi3"
p40
:
"po"
p41
:
"po1"
p42
:
"po2"
p43
:
"po3"
p50
:
"po"
p51
:
"po1"
p52
:
"po2"
p53
:
"po3"
p60
:
"pu"
p61
:
"pu1"
p62
:
"po2"
p63
:
"po3"
p70
:
"pu"
p71
:
"pu1"
p72
:
"po2"
p73
:
"po3"
q10
:
"qa"
q11
:
"qa1"
q12
:
"qa2"
q13
:
"qa3"
q20
:
"qa"
q21
:
"qa1"
q22
:
"qa2"
q23
:
"qa3"
q30
:
"qi"
q31
:
"qi1"
q32
:
"qi2"
q33
:
"qi3"
q40
:
"qo"
q41
:
"qo1"
q42
:
"qo2"
q43
:
"qo3"
q50
:
"qo"
q51
:
"qo1"
q52
:
"qo2"
q53
:
"qo3"
q60
:
"qu"
q61
:
"qu1"
q62
:
"qo2"
q63
:
"qo3"
q70
:
"qu"
q71
:
"qu1"
q72
:
"qo2"
q73
:
"qo3"
r10
:
"ra"
r11
:
"ra1"
r12
:
"ra2"
r13
:
"ra3"
r14
:
"ra4"
r20
:
"ra"
r21
:
"ra1"
r22
:
"ra2"
r23
:
"ra3"
r24
:
"ra4"
r30
:
"ri"
r31
:
"ri1"
r32
:
"ri2"
r33
:
"ri3"
r40
:
"ro"
r41
:
"ro1"
r42
:
"ro2"
r43
:
"ro3"
r50
:
"ro"
r51
:
"ro1"
r52
:
"ro2"
r53
:
"ro3"
r60
:
"ru"
r61
:
"ru1"
r62
:
"ro2"
r63
:
"ro3"
r70
:
"ru"
r71
:
"ru1"
r72
:
"ro2"
r73
:
"ro3"
s10
:
"sa"
s11
:
"sa1"
s12
:
"sa2"
s13
:
"sa3"
s20
:
"sa"
s21
:
"sa1"
s22
:
"sa2"
s23
:
"sa3"
s30
:
"si"
s31
:
"si1"
s32
:
"si2"
s33
:
"si3"
s40
:
"so"
s41
:
"so1"
s42
:
"so2"
s43
:
"so3"
s50
:
"so"
s51
:
"so1"
s52
:
"so2"
s53
:
"so3"
s60
:
"su"
s61
:
"su1"
s62
:
"so2"
s63
:
"so3"
s70
:
"su"
s71
:
"su1"
s72
:
"so2"
s73
:
"so3"
t10
:
"ta"
t11
:
"ta1"
t12
:
"ta2"
t13
:
"ta3"
t20
:
"ta"
t21
:
"ta1"
t22
:
"ta2"
t23
:
"ta3"
t30
:
"ti"
t31
:
"ti1"
t32
:
"ti2"
t33
:
"ti3"
t40
:
"to"
t41
:
"to1"
t42
:
"to2"
t43
:
"to3"
t50
:
"to"
t51
:
"to1"
t52
:
"to2"
t53
:
"to3"
t60
:
"tu"
t61
:
"tu1"
t62
:
"to2"
t63
:
"to3"
t70
:
"tu"
t71
:
"tu1"
t72
:
"to2"
t73
:
"to3"
w10
:
"wa"
w11
:
"wa1"
w12
:
"wa2"
w13
:
"wa3"
w14
:
"wa4"
w20
:
"wa"
w21
:
"wa1"
w22
:
"wa2"
w23
:
"wa3"
x10
:
"xa"
x11
:
"xa1"
x12
:
"xa2"
x13
:
"xa3"
x20
:
"xa"
x21
:
"xa1"
x22
:
"xa2"
x23
:
"xa3"
x30
:
"xi"
x31
:
"xi1"
x32
:
"xi2"
x33
:
"xi3"
x40
:
"xo"
x41
:
"xo1"
x42
:
"xo2"
x43
:
"xo3"
x50
:
"xo"
x51
:
"xo1"
x52
:
"xo2"
x53
:
"xo3"
x60
:
"xu"
x61
:
"xu1"
x62
:
"xo2"
x63
:
"xo3"
x70
:
"xu"
x71
:
"xu1"
x72
:
"xo2"
x73
:
"xo3"
y10
:
"ya"
y11
:
"ya1"
y12
:
"ya2"
y13
:
"ya3"
y14
:
"ya4"
y20
:
"ya"
y21
:
"ya1"
y22
:
"ya2"
y23
:
"ya3"
y24
:
"ya4"
y30
:
"yi"
y31
:
"yi1"
y32
:
"yi2"
y33
:
"yi3"
y40
:
"yo"
y41
:
"yo1"
y42
:
"yo2"
y43
:
"yo3"
y50
:
"yo"
y51
:
"yo1"
y52
:
"yo2"
y53
:
"yo3"
y60
:
"yu"
y61
:
"yu1"
y62
:
"yo2"
y63
:
"yo3"
y70
:
"yu"
y71
:
"yu1"
y72
:
"yo2"
y73
:
"yo3"
  }
**/
  var alphaListNamesMap = {
    o2: "o", u2: "u",
    ne: "na", no2: "no", nu2: "nu",
    be: "ba", bo2: "bo", bu2: "bu",
    pe: "pa", po2: "po", pu2: "pu",
    ho2: "ho", hu2: "hu",
    go2: "go", gu2: "gu",
    me: "ma", mo2: "mo", mu2: "mu",
    le: "la", lo2: "lo", lu2: "lu",
    se: "sa", so2: "so", su2: "su",
    xe: "xa", xo2: "xo", xu2: "xu",
    te: "ta", to2: "to", tu2: "tu",
    de: "da", do2: "do", du2: "du",
    qe: "qa", qo2: "qo", qu2: "qu",
    je: "ja", jo2: "jo", ju2: "ju",
    ye: "ya", yo2: "yo", yu2: "yu",
    re: "ra", ro2: "ro", ru2: "ru",
    we: "wa"
  };

  var alphaVariantNamesMap1 = $.extend({}, alphaListNamesMap, {
    ge: "he", gi: "hi", gu: "hu", gu2: "hu"
  });
  var alphaVariantNamesMap2 = $.extend({}, alphaVariantNamesMap1, {
    e: "a", u: "o", u2: "o",
    nu: "no", nu2: "no",
    bu: "bo", bu2: "bo",
    pu: "po", pu2: "po",
    mu: "mo", mu2: "mo",
    lu: "lo", lu2: "lo",
    su: "so", su2: "so",
    xu: "xo", xu2: "xo",
    tu: "to", tu2: "to",
    da: 'ta', de: 'ta', di: 'ti', do: 'to', do2: 'to', du: "to", du2: "to",
    qu: "qo", qu2: "qo",
    ju: "jo", ju2: "jo",
    yu: "yo", yu2: "yo",
    ru: "ro", ru2: "ro",
  });
  var alphaVariantNamesMap3 = alphaVariantNamesMap2;//{};

  /**var result = alphaVariantNamesMap3, key, obj = alphaVariantNamesMap2;
  for (key in obj) {
    if (obj.hasOwnProperty(key) && (key !== 'we')) {
      result[key] = obj[key];
    }
  }
  **/

  function setMonWord(str) {
    $.each(config.wordToReplaceMap, function (key, value) {
      var replace = key;
      var re = new RegExp(replace, "g");
      str = str.replace(re, '<span class="hawang-' + value + '"></span>');
    });

    return str;
  }

  function convertAlphas(tag) {
    var position = tag.substring(tag.length - 1);
    var name = tag.substring(0, tag.length - 1);
    var converted = '';

    switch (position) {
      case '1':
        converted = alphaVariantNamesMap1[name];
        break;
      case '2':
        converted = alphaVariantNamesMap2[name];
        break;
      case '3':
        converted = alphaVariantNamesMap3[name];
        break;
      default:
        converted = alphaListNamesMap[name];
    }

    if (converted) {
      converted = converted + position;
    } else {
      converted = tag;
    }

    if (converted.substring(converted.length - 1) == '0') {
      converted = converted.substring(0, converted.length - 1);
    }

    return converted;
  };

  var fontPosition = [0, 1, 2, 3];
  var vowels = ['a', 'e', 'i', 'o', 'o2', 'u', 'u2'];
  var letters = ['n', 'b', 'p', 'h', 'g', 'm', 'l', 's', 'x', 't', 'd', 'q', 'j', 'y', 'r', 'w'];

  function getVowels() {
    return vowels;
  };

  function createVowelPosition() {
    $.each(vowels, function (index, vowel) {
      $.each(fontPosition, function (index1, position) {
        config.wordToReplaceMap['a' + (index + 1) + position] = convertAlphas(vowel + position);
      });
    });
  }

  function createLetterPosition() {
    $.each(vowels, function (index, vowel) {
      $.each(letters, function (index1, letter) {
        // Letter 'w' has two alphas.
        if ((letter == 'w') && ($.inArray(vowel, ['a','e']) == -1)) {
          return;
        }
        $.each(fontPosition, function (index2, position) {
          config.wordToReplaceMap[letter + (index + 1) + position] = convertAlphas(letter + vowel + position);
        });
      });
    });
  }

  function createFourthAlphas() {
    config.wordToReplaceMap['n14'] = convertAlphas('na4');
    config.wordToReplaceMap['n24'] = convertAlphas('na4');
    config.wordToReplaceMap['m14'] = convertAlphas('ma4');
    config.wordToReplaceMap['m24'] = convertAlphas('ma4');
    config.wordToReplaceMap['l14'] = convertAlphas('la4');
    config.wordToReplaceMap['l24'] = convertAlphas('la4');
    config.wordToReplaceMap['y14'] = convertAlphas('ya4');
    config.wordToReplaceMap['y24'] = convertAlphas('ya4');
    config.wordToReplaceMap['r14'] = convertAlphas('ra4');
    config.wordToReplaceMap['r24'] = convertAlphas('ra4');
    config.wordToReplaceMap['w14'] = convertAlphas('wa4');
  }

  function getAlphaAllVariants(listalpha) {
    var prefix = listalpha.substr(0,2);
    var lists = [prefix + '1',prefix + '2',prefix + '3'];
    if (config.wordToReplaceMap[prefix + '4']) {
      lists.push(prefix + '4');
    }
    return lists;
  }

  function getUnicode(alpha) {
    return 'e910';
  }

  var config = {
    wordContainerCellClass: wordContainerCellClass,
    template: "scripts/word/word.template.html",
    wordToReplaceMap: {},
    getVowels: getVowels,
    getAlphaAllVariants: getAlphaAllVariants,
    getUnicode: getUnicode,
    setMonWord: setMonWord
  };

  createVowelPosition();
  createLetterPosition();

  createFourthAlphas();

  console.log(config.wordToReplaceMap);
  angular.module('app.word').
    constant('wordConfig', config);

})();